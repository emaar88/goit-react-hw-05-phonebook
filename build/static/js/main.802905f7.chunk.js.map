{"version":3,"sources":["ContactForm/ContactForm.module.css","Contact/Contact.module.css","ContactForm/ContactForm.js","Contact/Contact.js","ContactList/ContactList.js","Filter/Filter.js","App.js","serviceWorker.js","index.js","App.module.css","ContactList/ContactList.module.css","Filter/Filter.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","resetForm","handleSubmit","preventDefault","contact","id","uuidv4","props","submitForm","this","className","classes","container","onSubmit","form","type","inputText","placeholder","onChange","button","Component","Contact","deleteContact","onClick","ContactList","contacts","length","map","key","li","alert","Filter","filter","onRename","formFilter","App","Rename","addContact","some","oldContact","toLowerCase","prevState","haveContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filterContacts","includes","titleName","minTitleName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.802905f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"ContactForm_inputText__1zmTm\",\"button\":\"ContactForm_button__30A4h\",\"container\":\"ContactForm_container__2E3KB\",\"form\":\"ContactForm_form__33TTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contact_button__3Ym-x\"};","import React, { Component } from \"react\";\r\nimport classes from \"./ContactForm.module.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  resetForm = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    this.props.submitForm(contact);\r\n    this.resetForm();\r\n  };\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div className={classes.container}>\r\n        <form onSubmit={this.handleSubmit} className={classes.form}>\r\n          <label>\r\n            Name\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id={name}\r\n              className={classes.inputText}\r\n              placeholder=\"Input name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"number\"\r\n              id={number}\r\n              className={classes.inputText}\r\n              placeholder=\"Input phone number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className={classes.button} type=\"submit\">\r\n            Add Contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Contact.module.css\";\r\n\r\nconst Contact = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <>\r\n      {name}: {number}\r\n      <button onClick={deleteContact} className={classes.button}>\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\nimport Contact from \"../Contact/Contact\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <div className={classes.container}>\r\n      <ul>\r\n        {contacts.length > 0 ? (\r\n          contacts.map((contact) => (\r\n            <li key={contact.id} className={classes.li}>\r\n              <Contact\r\n                {...contact}\r\n                deleteContact={() => deleteContact(contact.id)}\r\n              />\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <li className={classes.alert}>No have contacts!</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filter, onRename }) => {\r\n  return (\r\n    <>\r\n      <div className={classes.container}>\r\n        <label>Find contacts by name</label>\r\n        <input\r\n          className={classes.formFilter}\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={onRename}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onRename: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import classes from \"./App.module.css\";\n\nimport React, { Component } from \"react\";\nimport ContactForm from \"./ContactForm\";\nimport ContactList from \"./ContactList\";\nimport Filter from \"./Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const haveContacts = localStorage.getItem(\"contacts\");\n    if (haveContacts) {\n      this.setState({\n        contacts: JSON.parse(haveContacts),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  Rename = (e) => {\n    const value = e.target.value;\n    this.setState({ filter: value });\n  };\n\n  addContact = (contact) => {\n    const isOldContact = this.state.contacts.some(\n      (oldContact) =>\n        oldContact.name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (isOldContact) {\n      alert(`${contact.name} уже есть в контактах!`);\n      return;\n    } else {\n      this.setState((prevState) => ({\n        contacts: [...prevState.contacts, contact],\n      }));\n    }\n  };\n  deleteContact = (id) => {\n    this.setState((state) => ({\n      contacts: state.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n  render() {\n    const { contacts, filter } = this.state;\n    const filterContacts = contacts.filter(({ name }) => {\n      return name.toLowerCase().includes(filter.toLowerCase());\n    });\n    return (\n      <>\n        <h1 className={classes.titleName}>Phonebook</h1>\n        <ContactForm submitForm={this.addContact}></ContactForm>\n        <h2 className={classes.minTitleName}>Contacts</h2>\n        <Filter filter={filter} onRename={this.Rename}></Filter>\n        <h2 className={classes.minTitleName}>Contacts List</h2>\n        <ContactList\n          contacts={filterContacts}\n          deleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleName\":\"App_titleName__LXzGt\",\"minTitleName\":\"App_minTitleName__3vU9B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__474Vy\",\"li\":\"ContactList_li__1F97V\",\"alert\":\"ContactList_alert__2hMtm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__265B9\",\"formFilter\":\"Filter_formFilter__15MwG\"};"],"sourceRoot":""}